name: dockercompose2909670607754507847
services:
  apigateway:
    build:
      context: C:\Users\User\Desktop\Microservice\Microservice
      dockerfile: ApiGateway/Dockerfile
    container_name: api-gateway
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_HTTP_PORTS: "8080"
      ASPNETCORE_HTTPS_PORTS: "8081"
    image: apigateway
    networks:
      backend: null
    ports:
      - mode: ingress
        target: 80
        published: "8001"
        protocol: tcp
      - mode: ingress
        target: 8080
        protocol: tcp
      - mode: ingress
        target: 8081
        protocol: tcp
    volumes:
      - type: bind
        source: C:\Users\User\AppData\Roaming/Microsoft/UserSecrets
        target: /home/app/.microsoft/usersecrets
        read_only: true
        bind:
          create_host_path: true
      - type: bind
        source: C:\Users\User\AppData\Roaming/ASP.NET/Https
        target: /home/app/.aspnet/https
        read_only: true
        bind:
          create_host_path: true
  customerdb:
    container_name: customer-db
    environment:
      ACCEPT_EULA: "Y"
      SA_PASSWORD: password@12345#
    image: mcr.microsoft.com/mssql/server:2019-latest
    networks:
      backend: null
    ports:
      - mode: ingress
        target: 1433
        published: "18001"
        protocol: tcp
  customerwebapi:
    build:
      context: C:\Users\User\Desktop\Microservice\Microservice
      dockerfile: CustomerWebApi/Dockerfile
    container_name: customer-api
    environment:
      DB_HOST: customerdb
      DB_NAME: dms_customer
      DB_SA_PASSWORD: password@12345#
    image: customerwebapi
    networks:
      backend: null
  orderdb:
    container_name: order-db
    image: mongo
    networks:
      backend: null
    ports:
      - mode: ingress
        target: 27017
        published: "18005"
        protocol: tcp
  orderwebapi:
    build:
      context: C:\Users\User\Desktop\Microservice\Microservice
      dockerfile: OrderWebApi/Dockerfile
    container_name: order-api
    environment:
      DB_HOST: orderdb
      DB_NAME: dms_order
    image: orderwebapi
    networks:
      backend: null
  productdb:
    container_name: product-db
    environment:
      MYSQL_ROOT_PASSWORD: password@12345#
    image: mysql:8.0.29-oracle
    networks:
      backend: null
    ports:
      - mode: ingress
        target: 3306
        published: "18003"
        protocol: tcp
  productwebapi:
    build:
      context: C:\Users\User\Desktop\Microservice\Microservice
      dockerfile: ProductWebApi/Dockerfile
    container_name: product-api
    environment:
      DB_HOST: productdb
      DB_NAME: dms_product
      DB_ROOT_PASSWORD: password@12345#
    image: productwebapi
    networks:
      backend: null
networks:
  backend:
    name: dockercompose2909670607754507847_backend